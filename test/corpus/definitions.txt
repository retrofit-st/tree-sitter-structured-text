==================
Program Definition
==================

PROGRAM testProgram
END_PROGRAM

---

(source_file
  (program_declaration
    (identifier)))

==================
Case insensitive program Definition
==================

program testProgram
END_program

---

(source_file
  (program_declaration
    (identifier)))

==================
Configuration Definition
==================

CONFIGURATION DefaultCfg
    VAR_GLOBAL
        b_Start_Stop  : BOOL;
        b_ON_OFF      : BOOL;
        Start_Stop AT %IX0.0:BOOL;
        ON_OFF     AT %QX0.0:BOOL;
    END_VAR

    // Schedule the main program to be executed every 20 ms
    TASK Tick(INTERVAL := T#20ms);

    PROGRAM Main WITH Tick : Monitor_Start_Stop;
END_CONFIGURATION

---

(source_file
  (configuration_declaration
    (identifier)
        (var_statement
          (var_definition
            (identifier)
            (primitive_type))
          (var_definition
            (identifier)
            (primitive_type))
          (var_definition
            (identifier)
            (float)
            (primitive_type))
          (var_definition
            (identifier)
            (float)
            (primitive_type)))
        (inline_comment)
        (task_statement
          (identifier)
          (assignment
          (time)))
        (program_statement
          (identifier)
          (identifier)
          (identifier))))

==================
Function Definition
==================

FUNCTION test
END_FUNCTION

---

(source_file
  (function_declaration
    (identifier)))

==================
Function with return value Definition
==================

FUNCTION test : INT
  VAR_TEMP
    i : INT := 2;
  END_VAR

  i := i + 1;

  test := i;
END_FUNCTION

---

(source_file
  (function_declaration
    (identifier)
    (primitive_type)
    (var_statement
      (var_definition
        (identifier)
        (primitive_type)
        (integer)))
    (identifier)
    (boolean_expression
      (identifier)
      (integer))
    (identifier)
      (identifier)))

==================
Function Block Definition
==================

FUNCTION_BLOCK test
END_FUNCTION_BLOCK

---

(source_file
  (function_block_declaration
    (identifier)))

==================
Class Definition
==================

CLASS test
END_CLASS

---

(source_file
  (class_declaration
    (identifier)))

==================
Namespace Definition
==================

NAMESPACE test
END_NAMESPACE

---

(source_file
  (namespace_declaration
    (identifier)))


==================
Namespace wraps others Definition
==================

NAMESPACE test.class
  CLASS testClass
    METHOD PUBLIC testfn
    END_METHOD
  END_CLASS
END_NAMESPACE

---

(source_file
  (namespace_declaration
    (identifier)
    (identifier)
    (class_declaration
      (identifier)
      (function_declaration
        (identifier)))))

==================
FunctionBlock with pragma definition
==================

NAMESPACE test.class
  {this is a pragma}
  FUNCTION_BLOCK testClass
    VAR
      {this is another pragma before a variable}
      hello : INT;
    END_VAR
  END_FUNCTION_BLOCK
END_NAMESPACE

---

(source_file
  (namespace_declaration
    (identifier)
    (identifier)
    (pragma_declaration)
    (function_block_declaration
      (identifier)
      (var_statement
        (pragma_declaration)
        (var_definition
          (identifier)
          (primitive_type))))))